package com.kissthinker.proxy.serializable;

import java.io.Serializable;
import java.util.Arrays;
import com.kissthinker.configure.Configuration;

/**
 * Representation of a Serializable invocation e.g for use with RMI call or Object&lt;Output|Input&gt;Stream.
 *
 * This is essentially a copy and paste from {@link com.kissthinker.proxy.Invocation}
 * TODO Not good, but the easiest way to make a "serializable" version of {@link com.kissthinker.proxy.Invocation}.
 * @author David Ainslie
 *
 */
public class Invocation implements Serializable
{
    /** */
    private static final long serialVersionUID = 1L;

    /** Class maybe annotated with {@link Configuration} TODO Why did I comment this? I know I originally did it when a string ID could be passed. */
    private final Class<?> class_;

    /** */
    private final Class<?> returnClass;

    /** */
    private final String methodName;

    /** */
    private final Serializable[] methodArgs;

    /**
     * @param class_ Class
     * @param returnClass Return class
     * @param methodName Method name
     * @param methodArgs Not a varags as is the original in {@link com.kissthinker.proxy.Invocation} to avoid calls turning into (incorrectly) nested arrays.
     */
    public Invocation(Class<?> class_, Class<?> returnClass, String methodName, Serializable[] methodArgs)
    {
        super();
        this.class_ = class_;
        this.returnClass = returnClass;
        this.methodName = methodName;
        this.methodArgs = methodArgs;
    }

    /**
     * Getter
     * @return Class
     */
    public Class<?> class_()
    {
        return class_;
    }

    /**
     * Getter.
     * @return Class
     */
    public Class<?> returnClass()
    {
        return returnClass;
    }

    /**
     *
     * @return boolean
     */
    public boolean returns()
    {
        return !void.class.isAssignableFrom(returnClass);
    }

    /**
     * Getter
     * @return Method name
     */
    public String methodName()
    {
        return methodName;
    }

    /**
     * Getter
     * @return Method arguments
     */
    public Object[] methodArgs()
    {
        return methodArgs;
    }

    /**
     * Autogenerated.
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((class_ == null) ? 0 : class_.hashCode());
        result = prime * result + Arrays.hashCode(methodArgs);
        result = prime * result + ((methodName == null) ? 0 : methodName.hashCode());
        result = prime * result + ((returnClass == null) ? 0 : returnClass.hashCode());
        return result;
    }

    /**
     * Autogenerated.
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Invocation other = (Invocation)obj;
        if (class_ == null)
        {
            if (other.class_ != null)
                return false;
        }
        else if (!class_.equals(other.class_))
            return false;
        if (!Arrays.equals(methodArgs, other.methodArgs))
            return false;
        if (methodName == null)
        {
            if (other.methodName != null)
                return false;
        }
        else if (!methodName.equals(other.methodName))
            return false;
        if (returnClass == null)
        {
            if (other.returnClass != null)
                return false;
        }
        else if (!returnClass.equals(other.returnClass))
            return false;
        return true;
    }

    /**
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString()
    {
        return String.format("Invocation [class_=%s, returnClass=%s, methodName=%s, methodArgs=%s]", class_, returnClass, methodName, Arrays.toString(methodArgs));
    }
}